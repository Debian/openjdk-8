#!/usr/bin/make -f
# -*- makefile -*-

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

unexport LANG LC_ALL

SHELL = /bin/bash

vafilt = $(subst $(2)=,,$(filter $(2)=%,$(1)))

DPKG_VARS		:= $(shell dpkg-architecture)
DEB_HOST_GNU_TYPE	?= $(call vafilt,$(DPKG_VARS),DEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE	?= $(call vafilt,$(DPKG_VARS),DEB_BUILD_GNU_TYPE)
DEB_HOST_ARCH		?= $(call vafilt,$(DPKG_VARS),DEB_HOST_ARCH)

CHANGELOG_VARS := $(shell dpkg-parsechangelog | sed -n 's/ /_/g;/^[^_]/s/^\([^:]*\):_\(.*\)/\1=\2/p')
PKGSOURCE := $(call vafilt,$(CHANGELOG_VARS),Source)

# Support parallel=<n> in DEB_BUILD_OPTIONS (see #209008)
COMMA=,
ifneq (,$(filter parallel=%,$(subst $(COMMA), ,$(DEB_BUILD_OPTIONS))))
  NJOBS = $(subst parallel=,,$(filter parallel=%,$(subst $(COMMA), ,$(DEB_BUILD_OPTIONS))))
  HOTSPOT_BUILD_JOBS = $(NJOBS)
  ALT_PARALLEL_COMPILE_JOBS = $(NJOBS)
  export HOTSPOT_BUILD_JOBS
  export ALT_PARALLEL_COMPILE_JOBS
endif

# make the build log comparable
#export HOTSPOT_BUILD_JOBS = 1
#export ALT_PARALLEL_COMPILE_JOBS = 1

with_check = $(if $(findstring nocheck, $(DEB_BUILD_OPTIONS)),,yes)
with_docs = $(if $(findstring nodocs, $(DEB_BUILD_OPTIONS)),,yes)
ifneq (,$(findstring cacao, $(PKGSOURCE)))
  with_docs = disabled for cacao
endif
with_plugin =

distribution := $(shell lsb_release --id --short)
distrel := $(shell lsb_release --codename --short)

with_wgy_zenhai = $(if $(filter $(distrel),hardy intrepid),yes)

arch_map	:= alpha=alpha arm=arm armel=arm amd64=amd64 i386=i586 lpia=i586 m68k=m68k mips=mips mipsel=mipsel powerpc=ppc sparc=sparc s390=s390 ia64=ia64
archdir_map	:= alpha=alpha arm=arm armel=arm amd64=amd64 i386=i386 lpia=i386 m68k=m68k mips=mips mipsel=mipsel powerpc=ppc sparc=sparc s390=s390 ia64=ia64

jvmarch		:= $(strip $(patsubst $(DEB_HOST_ARCH)=%, %, \
			$(filter $(DEB_HOST_ARCH)=%, $(arch_map))))
archdir		:= $(strip $(patsubst $(DEB_HOST_ARCH)=%, %, \
			$(filter $(DEB_HOST_ARCH)=%, $(archdir_map))))

hotspot_archs	= amd64 i386 lpia sparc
no_bootstrap_archs = alpha hppa

stage1_gcj_archs = amd64 armel i386 ia64 lpia powerpc m68k mips mipsel sparc s390
stage1_openjdk_archs = alpha
stage1_cacao_archs =

ifneq (,$(findstring cacao, $(PKGSOURCE)))
  stage1_gcj_archs = armel ia64 m68k mips mipsel s390
  stage1_openjdk_archs = amd64 i386 lpia sparc
  stage1_cacao_archs = alpha powerpc
endif

ifneq (,$(filter $(DEB_HOST_ARCH), $(stage1_gcj_archs)))
  STAGE1_JAVA = gcj
  STAGE1_HOME = /usr/lib/jvm/java-gcj
else ifneq (,$(filter $(DEB_HOST_ARCH), $(stage1_openjdk_archs)))
  STAGE1_JAVA = openjdk
  STAGE1_HOME = /usr/lib/jvm/java-6-openjdk
else ifneq (,$(filter $(DEB_HOST_ARCH), $(stage1_cacao_archs)))
  STAGE1_JAVA = cacao
  STAGE1_HOME = /usr/lib/jvm/java-6-cacao
else
  $(error unknown bootstrap method for architecture $(DEB_HOST_ARCH))
endif

OPENJDK_VERSION = b12
OPENJDK_SRC_ZIP = openjdk-6-src-$(OPENJDK_VERSION)-28_aug_2008-dfsg.tar.gz
# the version of the build dependency for non-bootstrap builds; only adjust if
# the package is installable on all these architectures.
req_openjdk_bd_ver = 6b11
req_openjdk_ver = 6b11

unexport CFLAGS CXXFLAGS CPPFLAGS FFLAGS LDFLAGS

ifneq (,$(filter $(distrel),hardy gutsy feisty edgy dapper))
  ifneq (,$(filter $(DEB_HOST_ARCH), i386 lpia))
    export GCC_SUFFIX = -4.1
    GCJ_SUFFIX = -4.2
  endif
  ifneq (,$(filter $(DEB_HOST_ARCH), amd64 powerpc sparc))
    export GCC_SUFFIX = -4.2
  endif
else
  export GCC_SUFFIX = -4.3
  export GCJ_SUFFIX = -4.3
endif

DISTRIBUTION_PATCHES = \
	$(if $(filter $(distribution),Ubuntu),debian/patches/gcc-no-stack-protector.diff) \
	debian/patches/gcc-mtune-generic.diff \
	debian/patches/ld-symbolic-functions.diff \
	debian/patches/set-exec-name.diff \
	debian/patches/shebang.diff \
	debian/patches/jexec.diff \
	debian/patches/fontconfig-$(if $(with_wgy_zenhai),wqy-zenhei,arphic-uming).diff \
	debian/patches/no-compiler-path.diff \
	debian/patches/fix-race-cond-print.diff \

ifneq (,$(filter $(distrel),hardy gutsy feisty edgy dapper))
  DISTRIBUTION_PATCHES += \
	$(if $(filter $(DEB_HOST_ARCH), amd64), debian/patches/gcc-jdk-opt-O2.diff) \
	$(if $(filter $(DEB_HOST_ARCH), powerpc), debian/patches/gcc-opt-O2.diff)
endif

ifeq ($(distribution),Ubuntu)
  DISTRIBUTION_PATCHES += debian/patches/openjdk-ubuntu-branding.patch
endif

ifneq (,$(findstring cacao, $(PKGSOURCE)))
  DISTRIBUTION_PATCHES += \
	debian/patches/cacao-no-mmap-first-page.diff \
	debian/patches/cacao-min-heapsize.diff \
	debian/patches/cacao-s390-ldflags.diff \
	debian/patches/cacao-mipsel-linux.diff
endif

export DISTRIBUTION_PATCHES

ifeq ($(STAGE1_JAVA),gcj)
  CONFIGURE_ARGS = \
	--with-gcj-home=$(STAGE1_HOME) \
	--with-ecj=/usr/bin/ecj \
	--with-java=$(STAGE1_HOME)/bin/java \
	--with-javah=/usr/bin/gjavah$(GCJ_SUFFIX) \
	--with-rmic=/usr/bin/grmic$(GCJ_SUFFIX) \
	--with-jar=/usr/bin/fastjar \
	--with-alt-jar=/usr/bin/fastjar \
	--with-libgcj-jar=/usr/share/java/libgcj$(GCJ_SUFFIX).jar
  build_target = icedtea-against-icedtea
else ifeq ($(STAGE1_JAVA),openjdk)
  CONFIGURE_ARGS = \
	--with-icedtea \
	--with-icedtea-home=$(STAGE1_HOME) \
	--with-alt-jar=/usr/bin/fastjar
  build_target = #icedtea-against-icedtea
else ifeq ($(STAGE1_JAVA),cacao)
  CONFIGURE_ARGS = \
	--with-icedtea \
	--with-icedtea-home=$(STAGE1_HOME) \
	--with-alt-jar=/usr/bin/fastjar
  build_target = #icedtea-against-icedtea
endif

CONFIGURE_ARGS += \
	--with-xalan2-jar=/usr/share/java/xalan2.jar \
	--with-xalan2-serializer-jar=/usr/share/java/serializer.jar \
	--with-rhino=/usr/share/java/js.jar \
	--with-openjdk-src-zip=$(OPENJDK_SRC_ZIP) \
	$(if $(with_plugin),,--disable-gcjwebplugin)

ifneq (,$(findstring cacao, $(PKGSOURCE)))
  CONFIGURE_ARGS += \
	--with-cacao \
	--with-cacao-src-zip=$(CURDIR)/cacao-0.99.3.tar.bz2
  ifneq (,$(filter $(DEB_HOST_ARCH), arm armel))
    EXTRA_BUILD_ENV = CACAO_CONFIGURE_ARGS='--enable-softfloat --host=$(DEB_HOST_GNU_TYPE) --build=$(DEB_BUILD_GNU_TYPE)'
  else
    EXTRA_BUILD_ENV = CACAO_CONFIGURE_ARGS='--host=$(DEB_HOST_GNU_TYPE) --build=$(DEB_BUILD_GNU_TYPE)'
  endif
else
  ifeq (,$(filter $(DEB_HOST_ARCH), $(hotspot_archs)))
    CONFIGURE_ARGS += --enable-zero
  endif
  ifeq (,$(filter $(DEB_HOST_ARCH), $(hotspot_archs)))
    EXTRA_BUILD_ENV = LIBFFI_LIBS=-lffi_pic
  endif
endif

# assume we don't build binary indep packages on these architectures
ifeq ($(with_docs),yes)
  ifneq (,$(filter $(DEB_HOST_ARCH), alpha arm armel hppa ia64 lpia m68k mips mipsel powerpc s390 sparc))
    CONFIGURE_ARGS += --disable-docs
  endif
else
  CONFIGURE_ARGS += --disable-docs
endif

ifneq (,$(NJOBS))
  CONFIGURE_ARGS += --with-parallel-jobs=$(NJOBS)
endif

# experimental; we don't include the plugin in any package built from this source.
#CONFIGURE_ARGS += --enable-liveconnect

CONFIGURE_ARGS += --host=$(DEB_HOST_GNU_TYPE) --build=$(DEB_BUILD_GNU_TYPE)

VENDOR		:= openjdk
Vendor		:= OpenJDK

TOP		= usr/lib/jvm
jdirname	= java-$(shortver)-$(origin)
ifneq (,$(findstring cacao, $(PKGSOURCE)))
  origin	= cacao
  basename	= cacao-oj$(shortver)
  priority	= 1059
  p_lib_arch	= any
  vm_name	= CacaoVM JIT
else
  origin	= openjdk
  basename	= openjdk-$(shortver)
  ifneq (,$(filter $(DEB_HOST_ARCH), $(hotspot_archs)))
    priority	= 1061
    vm_name	= Hotspot JIT
  else
    priority	= 1057
    vm_name	= Hotspot Zero
  endif
  p_lib_arch	= all
endif
jvmver		= 1.6.0
shortver	= 6
jdiralias	= java-$(shortver)-$(origin)
basedir		= usr/lib/jvm/$(jdiralias)
jreimg		= openjdk/control/build/linux-$(jvmarch)/j2re-image
sdkimg		= openjdk/control/build/linux-$(jvmarch)/j2sdk-image
security	= etc/$(jdiralias)/security

# (most) jre and jdk tools handled by the alternatives system.
# dups in heimdal-clients, krb5-user: kinit, klist, ktab, no alternatives
all_jre_tools	= $(notdir $(wildcard $(jreimg)/bin/*))
jre_tools	= $(filter javaws pluginappletviewer policytool, $(all_jre_tools))
jre_hl_tools	:= $(filter-out $(jre_tools), $(all_jre_tools))

corba_tools	= orbd servertool tnameserv
jre_hl_tools_alt= $(filter-out $(corba_tools), $(jre_hl_tools)) $(corba_tools)
jre_tools_alt	= $(filter-out kinit klist ktab, $(jre_tools))

all_jdk_tools	= $(notdir $(wildcard $(sdkimg)/bin/*))
jdk_tools	= $(filter-out $(all_jre_tools), $(all_jdk_tools))
jdk_tools_alt	= $(filter-out java-rmi.cgi, $(jdk_tools))

ifeq ($(distribution),Ubuntu)
  pkg_compress	= lzma
else
  pkg_compress  = bzip2
endif

# build dependencies
bd_bootstrap =
ifneq (,$(stage1_gcj_archs))
  bd_bootstrap += \
	gcj (>= 4:4.2.1) [$(strip $(foreach a,$(stage1_gcj_archs), $(a)))], \
	ecj [$(strip $(foreach a,$(stage1_gcj_archs), $(a)))], \
	java-gcj-compat-dev (>= 1.0.76-2ubuntu3) [$(strip $(foreach a,$(stage1_gcj_archs), $(a)))],
endif
ifneq (,$(stage1_openjdk_archs))
  bd_bootstrap += \
	openjdk-6-jdk (>= $(req_openjdk_bd_ver)) [$(strip $(foreach a,$(stage1_openjdk_archs), $(a)))],
endif
ifneq (,$(stage1_cacao_archs))
  bd_bootstrap += \
	cacao-oj6-jdk [$(strip $(foreach a,$(stage1_cacao_archs), $(a)))],
endif

bd_gcc = \
	g++-4.2 [amd64 powerpc sparc], g++-4.1 [i386 lpia],
ifeq (,$(filter $(distrel),hardy gutsy feisty edgy dapper))
  bd_gcc = \
	g++-4.3,
endif
bd_syslibs = \
	libjpeg62-dev, libpng12-dev, libgif-dev$(if $(filter $(distrel),etch dapper edgy feisty gutsy), | libungif4-dev), zlib1g-dev,
bd_openjdk = \
	libxtst-dev, libxi-dev, libxt-dev, libxp-dev, libxaw7-dev, \
	$(if $(filter $(distrel), etch dapper edgy gutsy hardy),libcupsys2-dev,libcups2-dev), \
	libasound2-dev, libfreetype6-dev, \
	libxalan2-java, rhino, liblcms1-dev, libxinerama-dev,
bd_zero = \
	$(if $(filter $(distribution),Ubuntu),$(if $(filter $(distrel),hardy),libffi4-dev,libffi-dev),libffi-dev) [$(foreach a,$(hotspot_archs),!$(a))],
#ifeq ($(with_plugin),yes)
  bd_plugin = \
	libgtk2.0-dev, $(if $(filter $(distribution),Debian),iceape-dev,$(if $(filter $(distrel),hardy intrepid),xulrunner-1.9-dev,firefox-dev)),
#endif
bd_netx = fastjar (>= 2:0.96-0ubuntu2),
bd_mauve = mauve, xvfb, autoconf, automake, xauth, xfonts-base
bd_compress = $(pkg_compress),

dlopen_hl_depends = \
	$(if $(filter $(distrel), etch dapper edgy gutsy hardy),libcupsys2,libcups2), \
	liblcms1
dlopen_hl_recommends = \
dlopen_jre_depends = \
	libgtk2.0-0, libgnome2-0, libgnomevfs2-0, libgconf2-4, \
	libxrandr2, libxinerama1, libgl1-mesa-glx
dlopen_jre_recommends =

browser_plugin_dirs = xulrunner-addons firefox iceape iceweasel mozilla midbrowser xulrunner

ifneq (,$(filter $(distrel),etch dapper feisty))
  core_fonts = ttf-dejavu
else
  core_fonts = ttf-dejavu-core
endif
cjk_fonts = ttf-baekmuk | ttf-unfonts | ttf-unfonts-core,
cjk_fonts += ttf-kochi-gothic | ttf-sazanami-gothic,
cjk_fonts += ttf-kochi-mincho | ttf-sazanami-mincho,
cjk_fonts += $(if $(with_wgy_zenhai),ttf-wqy-zenhei,ttf-arphic-uming),
ifneq (,$(filter $(distrel),lenny sid))
  cjk_fonts += ttf-indic-fonts,
else
  cjk_fonts += ttf-indic-fonts-core, ttf-telugu-fonts, ttf-oriya-fonts,
  cjk_fonts += ttf-kannada-fonts, ttf-bengali-fonts,
endif

p_jre	= $(basename)-jre
p_jrehl	= $(basename)-jre-headless
p_lib	= $(basename)-jre-lib
p_jdk	= $(basename)-jdk
p_demo	= $(basename)-demo
p_src	= $(basename)-source
p_doc	= $(basename)-doc
p_dbg	= $(basename)-dbg
p_plug	= $(basename)-plugin
p_plug	= icedtea-gcjwebplugin

d	= debian/tmp
d_jre	= debian/$(p_jre)
d_jrehl	= debian/$(p_jrehl)
d_lib	= debian/$(p_lib)
d_jdk	= debian/$(p_jdk)
d_demo	= debian/$(p_demo)
d_src	= debian/$(p_src)
d_doc	= debian/$(p_doc)
d_dbg	= debian/$(p_dbg)
d_plug	= debian/$(p_plug)

control_vars = \
	'-Vvm:Name=$(vm_name)' \
	'-Vbase:Version=$(req_openjdk_ver)' \
	'-Vdlopenhl:Depends=$(dlopen_hl_depends)' \
	'-Vdlopenhl:Recommends=$(dlopen_hl_recommends)' \
	'-Vdlopenjre:Depends=$(dlopen_jre_depends)' \
	'-Vdlopenjre:Recommends=$(dlopen_jre_recommends)' \

ifeq ($(pkg_compress),lzma)
  bd_options = -- -Zlzma
  control_vars += '-Vdpkg:Depends=dpkg (>= 1.14.12ubuntu3)'
else ifeq ($(pkg_compress),bzip2)
  bd_options = -- -Zbzip2
  control_vars += '-Vdpkg:Depends=dpkg (>= 1.10.24)'
endif

debian/control: debian/control.in debian/rules
	@cp -p debian/control debian/control.old
	sed \
	      -e 's/@basename@/$(basename)/g' \
	      -e 's/@bd_bootstrap@/$(bd_bootstrap)/g' \
	      -e 's/@bd_openjdk@/$(bd_openjdk)/g' \
	      -e 's/@bd_zero@/$(bd_zero)/g' \
	      -e 's/@bd_gcc@/$(bd_gcc)/g' \
	      -e 's/@bd_syslibs@/$(bd_syslibs)/g' \
	      -e 's/@bd_plugin@/$(bd_plugin)/g' \
	      -e 's/@bd_netx@/$(bd_netx)/g' \
	      -e 's/@bd_mauve@/$(bd_mauve)/g' \
	      -e 's/@bd_compress@/$(pkg_compress)/g' \
	      -e 's/@core_fonts@/$(core_fonts)/g' \
	      -e 's/@cjk_fonts@/$(cjk_fonts)/g' \
	      -e 's,@pkg_version@,$(if $(filter $(distrel),etch dapper edgy feisty gutsy),$${Source-Version},$${binary:Version}),g' \
	      -e 's/@lib_arch@/$(p_lib_arch)/g' \
	    debian/control.in $(if $(with_plugin),debian/control.plugin) > debian/control
	@if cmp -s debian/control debian/control.old; then \
	  rm -f debian/control.old; \
	else \
	  diff -u debian/control.old debian/control; \
	  echo "debian/control did change, please restart the build"; \
	  rm -f debian/control.old; \
          exit 1; \
	fi

packaging-files:
	for f in debian/*.in; do \
	  case "$$f" in debian/control.in) continue; esac; \
	  f2=$$(echo $$f | sed 's/JB/$(basename)/;s/\.in$$//'); \
	  sed -e 's/@JRE@/$(p_jre)/g' \
	      -e 's/@JDK@/$(p_jdk)/g' \
	      -e 's/@vendor@/$(Vendor)/g' \
	      -e 's/@RELEASE@/$(shortver)/g' \
	      -e 's/@basename@/$(basename)/g' \
	      -e 's,@TOP@,$(TOP),g' \
	      -e 's,@basedir@,$(basedir),g' \
	      -e 's,@basediralias@,$(TOP)/$(jdiralias),g' \
	      -e 's,@jdiralias@,$(jdiralias),g' \
	      -e 's,@jdirname@,$(jdirname),g' \
	      -e 's/@srcname@/$(srcname)/g' \
	      -e 's/@jvmarch@/$(jvmarch)/g' \
	      -e 's/@archdir@/$(archdir)/g' \
	      -e 's/@tag@/$(tag)/g' \
	      -e 's/@priority@/$(priority)/g' \
	      -e 's/@mantag@/$(mantag)/g' \
	      -e 's/@jre_hl_tools@/$(jre_hl_tools_alt)/g' \
	      -e 's/@jre_tools@/$(jre_tools_alt)/g' \
	      -e 's/@jdk_tools@/$(jdk_tools_alt)/g' \
	      -e 's/@corba_tools@/$(corba_tools)/g' \
	      -e 's,@j2se_lib@,$(j2se_lib),g' \
	      -e 's,@j2se_share@,$(j2se_share),g' \
	      -e 's,@browser_dirs@,$(browser_plugin_dirs),g' \
	      -e 's/@cjk_fonts@/$(cjk_fonts)/g' \
	    $$f > $$f2; \
	done
ifneq (,$(filter $(DEB_HOST_ARCH), i386 lpia))
# not yet in OpenJDK
#	cat debian/$(p_jre)-i586.menu >> $(d_jre).menu
	rm -f debian/$(p_jre)-i586.menu
endif

icedtea-configure: stamps/icedtea-configure
stamps/icedtea-configure:
ifeq (0,1)
	for i in $$(find test/jtreg -name '*.uu'); do \
	  [ -f $$i ] || continue; \
	  d=$$(dirname $$i); i=$$(basename $$i .uu); \
	  rm -f $$d/$$i; \
	  (cd $$d && uudecode $$i.uu); \
	done
endif
	mkdir -p stamps
	: > gcjwebplugin.cc
	chmod +x configure
	$(EXTRA_BUILD_ENV) ./configure $(CONFIGURE_ARGS)
	touch $@

unpack: stamps/backup-generated stamps/unpack
stamps/unpack: stamps/icedtea-configure stamps/backup-generated
	$(MAKE) stamps/extract.stamp
ifeq ($(STAGE1_JAVA),gcj)
	$(MAKE) stamps/extract-ecj.stamp
endif
	touch $@

dist-openjdk: $(OPENJDK_SRC_ZIP)
	@echo "downloading openjdk source from hg to create zipfile: $(OPENJDK_SRC_ZIP)"
	$(MAKE) $@

stamps/backup-generated: stamps/icedtea-configure
	if [ -f generated.tar ]; then \
	  echo >&2 "backup of generated files already exists"; \
	  exit 2; \
	fi
	tar cf generated.tar generated
	touch $@

patch: stamps/patch
stamps/patch: stamps/unpack
ifeq ($(STAGE1_JAVA),gcj)
	$(MAKE) stamps/patch-ecj.stamp
endif
	$(MAKE) stamps/patch.stamp
	touch $@

ifeq ($(with_check),yes)
  ifneq (,$(findstring cacao, $(PKGSOURCE)))
    ifneq (,$(filter $(DEB_HOST_ARCH), ))
      # only activate after testing; hangs several tests. no fun with mauve
      with_jtreg_check = yes
    endif
  else
    ifneq (,$(filter $(DEB_HOST_ARCH), amd64 i386 lpia powerpc sparc))
      with_mauve_check = yes
    endif
    ifneq (,$(filter $(DEB_HOST_ARCH), amd64 i386 lpia sparc))
      with_jtreg_check = yes
    endif
  endif
endif

build: stamps/build stamps/mauve-check stamps/jtreg-check
	if [ -f buildwatch.pid ]; then \
	  pid=$$(cat buildwatch.pid); \
	  kill -1 $$pid || :; sleep 1; kill -9 $$pid || :; \
	fi
	rm -f buildwatch.pid

stamps/build: stamps/patch
ifneq (,$(filter $(DEB_HOST_ARCH), alpha arm armel hppa ia64 m68k mips mipsel powerpc s390 sparc))
	sh -c 'sh debian/buildwatch.sh &'
endif
	$(EXTRA_BUILD_ENV) $(MAKE) $(build_target)
	touch $@

stamps/mauve-build: stamps/build
	rm -rf mauve
	mkdir -p mauve
ifeq ($(with_mauve_check),yes)
	tar xf /usr/src/mauve.tar.gz
	cd mauve \
	    && aclocal \
	    && automake \
	    && autoconf \
	    && PATH=$(CURDIR)/$(sdkimg)/bin:$$PATH ./configure --host=$(DEB_HOST_GNU_TYPE) --build=$(DEB_BUILD_GNU_TYPE)
	PATH=$(CURDIR)/$(sdkimg)/bin:$$PATH $(MAKE) -C mauve
endif
	touch $@

stamps/mauve-check: stamps/build stamps/mauve-build
ifeq ($(with_mauve_check),yes)
	-cd mauve && \
	    JAVA_HOME=$(CURDIR)/$(sdkimg) \
	    PATH=$(CURDIR)/$(sdkimg)/bin:$$PATH \
		xvfb-run -s "-extension GLX" java Harness \
		    -vm $(CURDIR)/$(sdkimg)/bin/java \
		    -file $(CURDIR)/debian/mauve_tests \
		    -timeout 30000 2>&1 \
		| tee mauve_output
	@sleep 5
else
	echo "mauve testsuite not run for this build" > mauve/mauve_output
endif
	touch $@

stamps/jtreg-check: stamps/build
ifeq ($(with_jtreg_check),yes)
	@echo "BEGIN jtreg"
	-xvfb-run $(MAKE) -k jtregcheck 2>&1 | tee jtreg_output
	@echo "END jtreg"
else
	echo "jtreg harness not run for this build" > jtreg_output
endif
	touch $@

clean: debian-clean
	dh_testdir
	dh_testroot
	rm -rf stamps
	[ ! -f Makefile ] || $(MAKE) distclean
	rm -rf openjdk openjdk-ecj
	rm -f generated/sun/awt/X11/generator/sizer.{32,64}
	rm -rf autom4te.cache
	rm -rf mauve
	rm -f jtreg_output
	rm -f buildwatch.pid
	rm -f gcjwebplugin.cc
	if [ -f generated.tar ]; then \
	  rm -rf generated; \
	  tar xf generated.tar; \
	  rm -f generated.tar; \
	fi

ifeq (0,1)
	for i in $$(find test/jtreg -name '*.gif') overlays/openjdk/jdk/test/com/sun/media/sound/SoftSynthesizer/expresso.mid overlays/openjdk/jdk/test/com/sun/media/sound/SoftSynthesizer/ding.sf2; do \
	  [ -f $$i ] || continue; \
	  if [ -f $$i.uu -a $$i.uu -nt $$i ]; then \
	    rm -f $$i; \
	  else \
	   d=$$(dirname $$i); i=$$(basename $$i); \
	   (cd $$d && uuencode -m $$i $$i > $$i.uu); \
	   rm -f $$d/$$i; \
	  fi; \
	done
endif

	dh_clean

debian-clean:
	dh_testdir
	dh_testroot
	dh_clean -k
	for f in debian/*.in; do \
	  f2=$$(echo $$f | sed 's/JB/$(basename)/;s/\.in$$//'); \
	  case "$$f2" in debian/control) continue; esac; \
	  rm -f $$f2; \
	done
	rm -f debian/*.install debian/*.links

install: packaging-files
	dh_testdir
	dh_testroot
	dh_clean -k
	rm -f debian/*.install debian/*.links
	dh_installdirs

	: # install into temporary location
	mkdir -p $(d)/$(basedir)
	cp -a $(sdkimg)/* $(d)/$(basedir)/
	cp -a $(jreimg)/man $(d)/$(basedir)/jre/
	chmod -R u+w $(d)

	: # add extra symlinks for header files
	ln -sf linux/jni_md.h $(d)/$(basedir)/include/jni_md.h
	ln -sf linux/jawt_md.h $(d)/$(basedir)/include/jawt_md.h

	: # compress manpages
	find $(d)/$(basedir)/man $(d)/$(basedir)/jre/man -type f ! -type l \
	  | xargs gzip -9v

	: # replace common files in jdk and jre by symlinks
	@cd $(d)/$(basedir); \
	  for i in `find jre -type f`; do \
	    i2=$${i#jre/*}; \
	    [ -f $$i2 ] && cmp -s $$i $$i2 || continue; \
	    d=$$(echo ./$$i2 | sed -r 's,[^/]+/,../,g;s,/[^/]+$$,,;s,\.\.$$,,'); \
	    echo "    symlink $$i2 -> $$d$$i"; \
	    ln -sf $$d$$i $$i2; \
	  done

	mkdir -p $(d)/etc/$(jdiralias)/security
	mkdir -p $(d)/etc/$(jdiralias)/management
	mkdir -p $(d)/etc/$(jdiralias)/images/cursors

	: # rename templates (comments only) to config files,
	: # and move to /etc/$(jdiralias)
	for i in \
	  management/jmxremote.password \
	  management/snmp.acl; \
	do \
	  mv $(d)/$(basedir)/jre/lib/$$i.template $(d)/etc/$(jdiralias)/$$i; \
	done

	cp -p debian/accessibility.properties $(d)/$(basedir)/jre/lib/
	cp -p debian/swing.properties $(d)/$(basedir)/jre/lib/

	rm -f $(d)/$(basedir)/jre/lib/security/cacerts

	: # move config files to etc/$(jdiralias) and symlink them.
	for i in \
	  accessibility.properties \
	  calendars.properties \
	  content-types.properties \
	  images/cursors/cursors.properties \
	  logging.properties \
	  sound.properties \
	  flavormap.properties \
	  net.properties \
	  psfontj2d.properties \
	  psfont.properties.ja \
	  swing.properties \
	  management/jmxremote.access \
	  management/management.properties \
	  security/java.policy \
	  security/java.security; \
	do \
	  mv $(d)/$(basedir)/jre/lib/$$i $(d)/etc/$(jdiralias)/$$i; \
	done
	mv $(d)/$(basedir)/jre/lib/$(archdir)/jvm.cfg \
		$(d)/etc/$(jdiralias)/

	mv $(d)/$(basedir)/jre/lib/fontconfig.Ubuntu.properties.src \
		$(d)/etc/$(jdiralias)/fontconfig.properties.src
	mv $(d)/$(basedir)/jre/lib/fontconfig.Ubuntu.bfc \
		$(d)/etc/$(jdiralias)/fontconfig.bfc

	: # remove files which we do not want to distribute
	rm -f $(d)/$(basedir)/jre/lib/fontconfig*.properties.src
	rm -f $(d)/$(basedir)/jre/lib/fontconfig*.bfc

	: # remove empty directories
	rmdir $(d)/$(basedir)/jre/lib/management
	rmdir $(d)/$(basedir)/jre/lib/applet

	: # TODO: why do we provide a custom font.properties.ja?
	: # cp -p debian/font.properties.ja $(d_jbin)/etc/$(jdiralias)/.
#	cp debian/font.properties.wgy_zenhai \
#		$(d)/etc/$(jdiralias)/font.properties.ja


	: # now move things to the packages. it is so ****** to create
	: # .install files first. dh_movefiles did do the job perfectly

	: # $(p_jrehl).install / $(p_jre).install
	( \
	  echo 'etc'; \
	  echo '$(basedir)/jre/lib/jexec'; \
	  echo '$(basedir)/jre/lib/rt.jar'; \
	  echo '$(basedir)/jre/man/ja'; \
	  echo '$(basedir)/man/ja'; \
	  echo '$(basedir)/bin/java-rmi.cgi'; \
	) > debian/$(p_jrehl).install
	$(RM) debian/$(p_jre).install

	cd $(CURDIR)/$(d); \
	for i in $(basedir)/jre/{bin,man/man1,man/ja_JP.eucJP/man1}/*; do \
	  case "$$i" in \
	    */javaws*|*/pluginappletviewer*|*/policytool*) echo $$i >> ../$(p_jre).install;; \
	    *) echo $$i >> ../$(p_jrehl).install; \
	  esac; \
	done

	cd $(CURDIR)/$(d); \
	for i in $(basedir)/{bin,man/man1,man/ja_JP.eucJP/man1}/*; do \
	  [ -h $$i ] || continue; \
	  case "$$i" in \
	    */javaws*|*/pluginappletviewer*|*/policytool*) echo $$i >> ../$(p_jre).install;; \
	    *) echo $$i >> ../$(p_jrehl).install; \
	  esac; \
	done; \

	cd $(CURDIR)/$(d); \
	for i in $(basedir)/jre/lib/$(archdir)/*; do \
	  case "$$i" in \
	    */gcjwebplugin.so) continue;; \
	    */libsplashscreen.so|*/libjsoundalsa.so|*/xawt) echo $$i >> ../$(p_jre).install;; \
	    *) echo $$i >> ../$(p_jrehl).install; \
	  esac; \
	done

	: # $(p_lib).install
	( \
	  echo '$(basedir)/jre/ASSEMBLY_EXCEPTION'; \
	  echo '$(basedir)/jre/README.html'; \
	  echo '$(basedir)/jre/THIRD_PARTY_README'; \
	  cd $(d); \
	  for i in $(basedir)/jre/lib/*; do \
	    case "$$i" in */$(archdir)|*/jexec|*/rt.jar) continue; esac; \
	    echo $$i; \
	  done; \
	) > debian/$(p_lib).install

	: # $(p_jdk).install
	( \
	  echo '$(basedir)/include'; \
	  echo '$(basedir)/lib'; \
	  echo '$(basedir)/LICENSE'; \
	  echo '$(basedir)/ASSEMBLY_EXCEPTION'; \
	  echo '$(basedir)/README.html'; \
	  echo '$(basedir)/THIRD_PARTY_README'; \
	  cd $(d); \
	  for i in $(basedir)/{bin,man/man1,man/ja_JP.eucJP/man1}/*; do \
	    [ -h $$i -o "$$i" = $(basedir)/bin/java-rmi.cgi ] && continue; \
	    echo $$i; \
	  done; \
	) > debian/$(p_jdk).install

ifeq ($(with_plugin),yes)
	dh_installdirs -p$(p_plug) \
		$(foreach d, $(browser_plugin_dirs), usr/lib/$(d)/plugins)

	: # $(p_plug).install
	( \
	  echo '$(basedir)/jre/lib/$(archdir)/gcjwebplugin.so'; \
	) > debian/$(p_plug).install
endif

	: # $(p_src).install
	( \
	  echo '$(basedir)/src.zip'; \
	) > debian/$(p_src).install

	: # move demos and samples, create symlinks for $(p_demo)
	mkdir -p $(d)/usr/share/doc/$(p_jre)/demo
	for i in $(d)/$(basedir)/demo/*; do \
	  b=$$(basename $$i); \
	  case "$$i" in \
	    */jvmti) \
	      echo $(basedir)/demo/$$b usr/share/doc/$(p_jre)/demo/$$b >> $(d_demo).links;; \
	    *) \
	      mv $$i $(d)/usr/share/doc/$(p_jre)/demo/$$b; \
	      echo usr/share/doc/$(p_jre)/demo/$$b $(basedir)/demo/$$b >> $(d_demo).links;; \
	  esac; \
	done
	mv $(d)/$(basedir)/sample $(d)/usr/share/doc/$(p_jre)/examples
	echo usr/share/doc/$(p_jre)/examples $(basedir)/sample >> $(d_demo).links
	echo usr/share/doc/$(p_jre) usr/share/doc/$(p_demo) >> $(d_demo).links

	: # $(p_demo).install
	( \
	  echo '$(basedir)/demo'; \
	  echo 'usr/share/doc/$(p_jre)/examples'; \
	  echo 'usr/share/doc/$(p_jre)/demo'; \
	) > debian/$(p_demo).install

	dh_install --sourcedir=debian/tmp --fail-missing -XLICENSE

	: # give all permissions to cross-VM extension directory
	sed -i \
	    -e '/permission java\.security\.AllPermission;/,/};/c\' \
	    -e '        permission java.security.AllPermission;\' \
	    -e '};\' \
	    -e '\' \
	    -e 'grant codeBase "file:/$(basedir)/ext/*" {\' \
	    -e '        permission java.security.AllPermission;\' \
	    -e '};\' \
	    -e '\' \
	    -e '// Comment this out if you want to give all permissions to the\' \
	    -e '// Debian Java repository too:\' \
	    -e '//grant codeBase "file:/usr/share/java/repository/-" {\' \
	    -e '//        permission java.security.AllPermission;\' \
	    -e '//};\' \
	    -e '' \
	    $(d_jrehl)/$(security)/java.policy
# 'make Emacs Makefile mode happy

	dh_installdirs -p$(p_jrehl) \
		usr/share/doc/$(p_jre) \
		usr/share/binfmts

	dh_installdirs -p$(p_jre) \
		usr/share/applications \
		usr/share/application-registry \
		usr/share/mime-info \
		usr/share/pixmaps

	: # add GNOME stuff
	cp -p debian/$(basename)-{javaws,policytool}.desktop \
	      $(d_jre)/usr/share/applications/
	cp -p debian/$(basename)-java.desktop \
	      $(d_jre)/usr/share/applications/
# not yet in OpenJDK
#	cp -p debian/$(basename)-controlpanel.desktop \
#	      $(d_jre)/usr/share/applications/

	for i in archive web-start; do \
	  cp debian/$(basename)-$$i.applications \
	    $(d_jre)/usr/share/application-registry/; \
	  cp debian/$(basename)-$$i.keys $(d_jre)/usr/share/mime-info/; \
	  cp debian/$(basename)-$$i.mime $(d_jre)/usr/share/mime-info/; \
	done

	cp -p debian/sun_java.xpm \
		$(d_jre)/usr/share/pixmaps/$(basename).xpm

	mkdir -p $(d_demo)/usr/share/pixmaps
	cp -p debian/sun_java_app.xpm \
		$(d_demo)/usr/share/pixmaps/$(basename)-app.xpm

	: # create docdir symlinks for $(p_jrehl)
	( \
	  echo usr/share/doc/$(p_jre) usr/share/doc/$(p_jrehl); \
	  echo usr/share/doc/$(p_jre) $(basedir)/docs; \
	) > $(d_jrehl).links

	: # create docdir symlinks for $(p_src)
	( \
	  echo usr/share/doc/$(p_jre) usr/share/doc/$(p_src); \
	) > $(d_src).links

	: # create docdir symlinks for $(p_jdk)
	( \
	  echo usr/share/doc/$(p_jre) usr/share/doc/$(p_jdk); \
	) > $(d_jdk).links

ifeq ($(with_plugin),yes)
	: # create docdir symlinks for $(p_plug)
	( \
	  echo usr/share/doc/$(p_jre) usr/share/doc/$(p_plug); \
	) > $(d_plug).links
endif

	: # create docdir symlinks for $(p_lib)
	( \
	  echo usr/share/doc/$(p_jre) usr/share/doc/$(p_lib); \
	) > $(d_lib).links

	: # create docdir symlinks for $(p_jdk)
	( \
	  echo usr/share/doc/$(p_jre) usr/share/doc/$(p_dbg); \
	) > $(d_dbg).links

	: # create links for the gnome accessibility bridge
	echo "usr/share/java/gnome-java-bridge.jar $(basedir)/jre/lib/ext/gnome-java-bridge.jar" \
	    >> $(d_jrehl).links

	: # create links for the config files
	find $(d_jrehl)/etc/$(jdiralias) -type f ! -name jvm.cfg \
	    -printf "etc/$(jdiralias)/%P $(basedir)/jre/lib/%P\n" >> $(d_jrehl).links
	echo "etc/$(jdiralias)/jvm.cfg $(basedir)/jre/lib/$(archdir)/jvm.cfg" \
	    >> $(d_jrehl).links
	echo "etc/ssl/certs/java/cacerts $(basedir)/jre/lib/security/cacerts" \
	    >> $(d_jrehl).links

	@echo JRE_HL_TOOLS: $(jre_hl_tools_alt) jexec
	@echo JRE_TOOLS: $(jre_tools_alt)
	@echo JDK_TOOLS: $(jdk_tools_alt)
	( \
	  echo 'name=$(jdirname)'; \
	  echo 'alias=$(jdiralias)'; \
	  echo 'priority=$(priority)'; \
	  echo 'section=main'; \
	  echo ''; \
	  for i in $(jre_hl_tools_alt); do \
	    echo "hl $$i /$(TOP)/$(jdiralias)/jre/bin/$$i"; \
	  done; \
	  echo "hl jexec /$(TOP)/$(jdiralias)/jre/lib/jexec"; \
	  for i in $(jre_tools_alt); do \
	    echo "jre $$i /$(TOP)/$(jdiralias)/jre/bin/$$i"; \
	  done; \
	  for i in $(jdk_tools_alt); do \
	    echo "jdk $$i /$(TOP)/$(jdiralias)/bin/$$i"; \
	  done; \
	  for d in $(browser_plugin_dirs); do \
	    case "$$d" in \
	      xulrunner-addons) b=xulrunner-1.9;; \
	      *) b=$$d;; \
	    esac; \
	    echo "plugin $$b-javaplugin.so /$(TOP)/$(jdiralias)/jre/lib/$(archdir)/gcjwebplugin.so"; \
	  done; \
	) > $(d_jrehl)/$(TOP)/.$(jdiralias).jinfo

	( \
	  echo 'package $(basename)'; \
	  echo 'interpreter /usr/bin/jexec'; \
	  echo 'magic PK\x03\x04'; \
	) > $(d_jrehl)/$(basedir)/jre/lib/jar.binfmt

	: # install a wrapper for javaws
	mv $(d_jre)/$(basedir)/jre/bin/javaws $(d_jre)/$(basedir)/jre/bin/javaws.real
	install -m 755 debian/javaws-wrapper.sh $(d_jre)/$(basedir)/jre/bin/javaws

	: # Install stuff to generate font config and timezone files.
	mkdir -p $(d_lib)/$(basedir)/jre/lib
	cp -p openjdk/control/build/linux-$(jvmarch)/btjars/compilefontconfig.jar \
		$(d_lib)/$(basedir)/jre/lib/
	cp -p openjdk/control/build/linux-$(jvmarch)/btjars/javazic.jar \
		$(d_lib)/$(basedir)/jre/lib/

	: # install lintian overrides
	for FILE in debian/*.overrides; do \
	  PKG=`basename $$FILE .overrides`; \
	  install -D -m644 $$FILE debian/$$PKG/usr/share/lintian/overrides/$$PKG; \
	done

nodocs = $(if $(findstring nodocs, $(DEB_BUILD_OPTIONS)),-N$(p_doc))
nodemo = $(if $(findstring cacao, $(PKGSOURCE)),-N$(p_demo))

# Build architecture independant packages
binary-indep: build install
	dh_testdir
	dh_testroot
ifneq (,$(findstring cacao, $(PKGSOURCE)))
	: # not building any binary-indep packages for cacao
else
  ifeq ($(with_docs),yes)
	dh_installchangelogs -p$(p_doc)
	dh_installdocs -p$(p_doc) 
	mkdir -p $(d_doc)/usr/share/doc/$(p_jre)
	for i in openjdk/control/build/linux-$(jvmarch)/docs/*; do \
	  [ -e $$i ] || continue; \
	  b=$$(basename $$i); \
	  cp -a $$i $(d_doc)/usr/share/doc/$(p_jre)/; \
	  ln -sf ../$(p_jre)/$$b $(d_doc)/usr/share/doc/$(p_doc)/$$b; \
	done
  endif
	dh_installmenu -i $(nodocs)
	-dh_icons -i $(nodocs) || dh_iconcache -i $(nodocs)
#	dh_installdebconf -i $(nodocs)
	dh_link -i $(nodocs)
	dh_compress -i $(nodocs) -Xexamples -Xdemos
	dh_fixperms -i $(nodocs)
	dh_installdeb -i $(nodocs)
	dh_gencontrol -i $(nodocs) -- $(control_vars)
	dh_md5sums -i $(nodocs)
	dh_builddeb -i $(nodocs) $(bd_options)
endif

absarchdir = $(CURDIR)/$(d_jrehl)/$(basedir)/jre/lib/$(archdir)
shlibdeps_ld_path =$(absarchdir):$(absarchdir)/client:$(absarchdir)/server:$(absarchdir)/native_threads

# Build architecture dependant packages
binary-arch: build install
	dh_testdir
	dh_testroot
	dh_installchangelogs -p$(p_jrehl)
	dh_installdocs -p$(p_jrehl) \
		debian/JAVA_HOME \
		debian/README.alternatives \
		debian/README.Debian
	mv $(d_jrehl)/usr/share/doc/$(p_jrehl)/* $(d_jrehl)/usr/share/doc/$(p_jre)
	rm -rf $(d_jrehl)/usr/share/doc/$(p_jrehl)
	for i in AUTHORS NEWS README; do \
	  cp -p $$i $(d_jrehl)/usr/share/doc/$(p_jre)/$$i.IcedTea; \
	done
	mkdir -p $(d_jdk)/usr/share/doc/$(p_jre)
	cp mauve/mauve_output $(d_jdk)/usr/share/doc/$(p_jre)/mauve_output.log
	cp jtreg_output $(d_jdk)/usr/share/doc/$(p_jre)/jtreg_output.log

	dh_installmenu -s $(nodemo)
	-dh_icons -s $(nodemo) || dh_iconcache -s $(nodemo)
#	dh_installdebconf -s $(nodemo)
	dh_link -s $(nodemo)
	dh_strip -s $(nodemo) --dbg-package=$(p_dbg)
	dh_compress -s $(nodemo)
	dh_fixperms -s $(nodemo)
	dh_makeshlibs -p$(p_jrehl) -p$(p_jre)
	dh_shlibdeps -s $(nodemo) -L $(p_jrehl) \
		-l$(shlibdeps_ld_path) \
		--
	dh_installdeb -s $(nodemo)
	dh_gencontrol -s $(nodemo) -- $(control_vars)
	dh_md5sums -s $(nodemo)
	dh_builddeb -s $(nodemo) #$(bd_options)

binary: binary-arch binary-indep
.PHONY: build clean binary-indep binary-arch binary install
