--- openjdk/hotspot/src/os_cpu/linux_zero/vm/globals_linux_zero.hpp.orig	2013-12-19 13:53:15.987056600 +0000
+++ openjdk/hotspot/src/os_cpu/linux_zero/vm/globals_linux_zero.hpp	2013-12-19 13:58:01.041010426 +0000
@@ -34,9 +34,13 @@
 define_pd_global(bool,  DontYieldALot,           false);
 define_pd_global(intx,  ThreadStackSize,         1664);
 #ifdef _LP64
-define_pd_global(intx,  VMThreadStackSize,       1024);
+#if defined (_LITTLE_ENDIAN) && defined (__powerpc64__)
+define_pd_global(intx,  VMThreadStackSize,       1920);
 #else
-define_pd_global(intx,  VMThreadStackSize,       512);
+define_pd_global(intx,  VMThreadStackSize,       1280);
+#endif
+#else
+define_pd_global(intx,  VMThreadStackSize,       640);
 #endif // _LP64
 define_pd_global(intx,  CompilerThreadStackSize, 0);
 define_pd_global(uintx, JVMInvokeMethodSlack,    8192);
--- openjdk/hotspot/src/os/linux/vm/os_linux.cpp
+++ openjdk/hotspot/src/os/linux/vm/os_linux.cpp
@@ -4538,6 +4538,7 @@
   initial_time_count = os::elapsed_counter();
   pthread_mutex_init(&dl_mutex, NULL);

+NOT_ZERO (
   // If the pagesize of the VM is greater than 8K determine the appropriate
   // number of initial guard pages.  The user can change this with the
   // command line arguments, if needed.
@@ -4546,6 +4547,7 @@
     StackRedPages = 1;
     StackShadowPages = round_to((StackShadowPages*Linux::vm_default_page_size()), vm_page_size()) / vm_page_size();
   }
+)
 }

 // To install functions for atexit system call
@@ -4598,9 +4600,16 @@
   // size.  Add a page for compiler2 recursion in main thread.
   // Add in 2*BytesPerWord times page size to account for VM stack during
   // class initialization depending on 32 or 64 bit VM.
+NOT_ZERO (
   os::Linux::min_stack_allowed = MAX2(os::Linux::min_stack_allowed,
             (size_t)(StackYellowPages+StackRedPages+StackShadowPages) * Linux::page_size() +
                     (2*BytesPerWord COMPILER2_PRESENT(+1)) * Linux::vm_default_page_size());
+)
+ZERO_ONLY (
+  os::Linux::min_stack_allowed = MAX2(os::Linux::min_stack_allowed,          
+            (size_t)(StackYellowPages+StackRedPages+StackShadowPages+
+                     2*BytesPerWord COMPILER2_PRESENT(+1)) * Linux::page_size());
+)

   size_t threadStackSizeInBytes = ThreadStackSize * K;
   if (threadStackSizeInBytes != 0 &&
