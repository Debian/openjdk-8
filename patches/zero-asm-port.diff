diff -ruNE ports/hotspot/build/linux/makefiles/zero.make ports/hotspot/build/linux/makefiles/zero.make
--- ports/hotspot/build/linux/makefiles/zero.make	2009-06-25 09:36:42.000000000 +0000
+++ ports/hotspot/build/linux/makefiles/zero.make	2009-06-29 09:57:25.000000000 +0000
@@ -23,6 +23,17 @@
 #
 #
 
+ifdef ICEDTEA_ZERO_BUILD
+ifeq ($(ZERO_LIBARCH),arm)
+Obj_Files += cppInterpreter_arm.o
+CFLAGS += -DHOTSPOT_ASM -DHW_NULL_PTR_CHECK -march=armv5t -mtune=cortex-a8 -O2 -falign-functions=64 -falign-loops=8 -g0
+%.o: %.S
+	@echo Assembling $<
+	$(QUIETLY) $(REMOVE_TARGET)
+	$(COMPILE.CC) -o $@ $< $(COMPILE_DONE)
+endif
+endif
+
 # The copied fdlibm routines in sharedRuntimeTrig.o must not be optimized
 OPT_CFLAGS/sharedRuntimeTrig.o = $(OPT_CFLAGS/NOOPT)
 # The copied fdlibm routines in sharedRuntimeTrans.o must not be optimized
diff -ruNE ports/hotspot/src/cpu/zero/vm/bytecodes_zero.cpp ports/hotspot/src/cpu/zero/vm/bytecodes_zero.cpp
--- ports/hotspot/src/cpu/zero/vm/bytecodes_zero.cpp	2009-06-25 09:36:42.000000000 +0000
+++ ports/hotspot/src/cpu/zero/vm/bytecodes_zero.cpp	2009-06-29 12:28:05.000000000 +0000
@@ -29,4 +29,32 @@
 void Bytecodes::pd_initialize()
 {
   // No zero specific initialization
+#if defined(PRODUCT) && defined(HOTSPOT_ASM)
+  def(_iaccess_0, "_iaccess_0", "b_jj", NULL, T_INT,  1, true, _aload_0);
+  def(_iaccess_1, "_iaccess_1", "b_jj", NULL, T_INT,  1, true, _aload_1);
+  def(_iaccess_2, "_iaccess_2", "b_jj", NULL, T_INT,  1, true, _aload_2);
+  def(_iaccess_3, "_iaccess_3", "b_jj", NULL, T_INT,  1, true, _aload_3);
+
+  def(_iload_0_iconst_N, "iload_0_iconst_N", "b_",  NULL, T_INT, 2, false, _iload_0);
+  def(_iload_1_iconst_N, "iload_1_iconst_N", "b_",  NULL, T_INT, 2, false, _iload_1);
+  def(_iload_2_iconst_N, "iload_2_iconst_N", "b_",  NULL, T_INT, 2, false, _iload_2);
+  def(_iload_3_iconst_N, "iload_3_iconst_N", "b_",  NULL, T_INT, 2, false, _iload_3);
+  def(_iload_iconst_N,   "iload_iconst_N",   "bi_", NULL, T_INT, 2, false, _iload);
+  def(_invokeresolved,   "invokeresolved",   "bjj", NULL, T_ILLEGAL, -1, true, _invokevirtual);
+
+  def(_iadd_istore_N,    "iadd_istore_N",    "b_",  NULL, T_VOID, -2, false, _iadd);
+  def(_isub_istore_N,    "isub_istore_N",    "b_",  NULL, T_VOID, -2, false, _isub);
+  def(_iand_istore_N,    "iand_istore_N",    "b_",  NULL, T_VOID, -2, false, _iand);
+  def(_ior_istore_N,     "ior_istore_N",     "b_",  NULL, T_VOID, -2, false, _ior);
+  def(_ixor_istore_N,    "ixor_istore_N",    "b_",  NULL, T_VOID, -2, false, _ixor);
+
+  def(_iadd_u4store,     "iadd_u4store",     "b_i", NULL, T_VOID, -2, false, _iadd);
+  def(_isub_u4store,     "isub_u4store",     "b_i", NULL, T_VOID, -2, false, _isub);
+  def(_iand_u4store,     "iand_u4store",     "b_i", NULL, T_VOID, -2, false, _iand);
+  def(_ior_u4store,      "ior_u4store",      "b_i", NULL, T_VOID, -2, false, _ior);
+  def(_ixor_u4store,     "ixor_u4store",     "b_i", NULL, T_VOID, -2, false, _ixor);
+
+  def(_invokespecialresolved, "invokespecialresolved", "bjj", NULL, T_ILLEGAL, -1, true, _invokespecial);
+  def(_invokestaticresolved,  "invokestaticresolved",  "bjj", NULL, T_ILLEGAL,  0, true, _invokestatic);
+#endif
 }
diff -ruNE ports/hotspot/src/cpu/zero/vm/bytecodes_zero.hpp ports/hotspot/src/cpu/zero/vm/bytecodes_zero.hpp
--- ports/hotspot/src/cpu/zero/vm/bytecodes_zero.hpp	2009-06-25 09:36:42.000000000 +0000
+++ ports/hotspot/src/cpu/zero/vm/bytecodes_zero.hpp	2009-06-29 12:27:41.000000000 +0000
@@ -0,0 +1,24 @@
+#if defined(PRODUCT) && defined(HOTSPOT_ASM)
+#define _iaccess_0	((Bytecodes::Code)0xdb)
+#define _iaccess_1	((Bytecodes::Code)0xdc)
+#define _iaccess_2	((Bytecodes::Code)0xdd)
+#define _iaccess_3	((Bytecodes::Code)0xde)
+	_iload_0_iconst_N	,	// 231
+	_iload_1_iconst_N	,	// 232
+	_iload_2_iconst_N	,	// 233
+	_iload_3_iconst_N	,	// 234
+	_iload_iconst_N		,	// 235
+	_invokeresolved		,	// 236
+	_iadd_istore_N		,	// 237
+	_isub_istore_N		,	// 238
+	_iand_istore_N		,	// 239
+	_ior_istore_N		,	// 240
+	_ixor_istore_N		,	// 241
+	_iadd_u4store		,	// 242
+	_isub_u4store		,	// 243
+	_iand_u4store		,	// 244
+	_ior_u4store		,	// 245
+	_ixor_u4store		,	// 246
+	_invokespecialresolved	,	// 247
+	_invokestaticresolved	,	// 248
+#endif
diff -ruNE ports/hotspot/src/cpu/zero/vm/cppInterpreter_zero.cpp ports/hotspot/src/cpu/zero/vm/cppInterpreter_zero.cpp
--- ports/hotspot/src/cpu/zero/vm/cppInterpreter_zero.cpp	2009-06-25 09:36:42.000000000 +0000
+++ ports/hotspot/src/cpu/zero/vm/cppInterpreter_zero.cpp	2009-06-29 12:32:43.000000000 +0000
@@ -721,11 +721,25 @@
   return generate_entry(CppInterpreter::normal_entry);
 }
 
+#if defined(PRODUCT) && defined(HOTSPOT_ASM)
+typedef void (*BCI_ENTRY)(methodOopDesc*, intptr_t, Thread*);
+extern "C" BCI_ENTRY asm_generate_method_entry(AbstractInterpreter::MethodKind kind);
+#endif
+
 address AbstractInterpreterGenerator::generate_method_entry(
     AbstractInterpreter::MethodKind kind) {
 
   address entry_point = NULL;
 
+#if defined(PRODUCT) && defined(HOTSPOT_ASM)
+  if (!UseCompiler && !TaggedStackInterpreter && !JvmtiExport::can_post_interpreter_events()
+						&& !PrintCommandLineFlags) {
+      BCI_ENTRY asm_entry = asm_generate_method_entry(kind);
+      if (asm_entry)
+	return ((InterpreterGenerator*)this)->generate_entry(asm_entry);
+  }
+#endif
+
   switch (kind) {
   case Interpreter::zerolocals:
   case Interpreter::zerolocals_synchronized:
diff -ruNE ports/hotspot/src/os_cpu/linux_zero/vm/os_linux_zero.cpp ports/hotspot/src/os_cpu/linux_zero/vm/os_linux_zero.cpp
--- ports/hotspot/src/os_cpu/linux_zero/vm/os_linux_zero.cpp	2009-06-25 09:36:42.000000000 +0000
+++ ports/hotspot/src/os_cpu/linux_zero/vm/os_linux_zero.cpp	2009-06-29 12:34:18.000000000 +0000
@@ -78,6 +78,10 @@
   Unimplemented();
 }
 
+#if defined(PRODUCT) && defined(HOTSPOT_ASM)
+extern "C" int asm_check_null_ptr(ucontext_t *uc);
+#endif
+
 extern "C" int
 JVM_handle_linux_signal(int sig,
                         siginfo_t* info,
@@ -86,6 +90,12 @@
 {
   ucontext_t* uc = (ucontext_t*) ucVoid;
 
+#if defined(PRODUCT) && defined(HOTSPOT_ASM)
+  if (sig == SIGSEGV) {
+        if (asm_check_null_ptr(uc)) return 1;
+  }
+#endif
+
   Thread* t = ThreadLocalStorage::get_thread_slow();
 
   SignalHandlerMark shm(t);
