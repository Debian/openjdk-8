diff -r 629529e53455 src/os/linux/vm/jvm_linux.cpp
--- openjdk.orig/hotspot/src/os/linux/vm/jvm_linux.cpp	Thu Nov 01 13:44:23 2007 +0300
+++ openjdk/hotspot/src/os/linux/vm/jvm_linux.cpp	Thu Nov 01 14:08:45 2007 +0300
@@ -132,7 +132,7 @@ JVM_END
 */
 
 struct siglabel {
-  char *name;
+  const char *name;
   int   number;
 };
 
diff -r 629529e53455 src/os/linux/vm/os_linux.cpp
--- openjdk.orig/hotspot/src/os/linux/vm/os_linux.cpp	Thu Nov 01 13:44:23 2007 +0300
+++ openjdk/hotspot/src/os/linux/vm/os_linux.cpp	Thu Nov 01 14:08:45 2007 +0300
@@ -199,7 +199,7 @@ pid_t os::Linux::gettid() {
 // the system call returns 1.  This causes the VM to act as if it is
 // a single processor and elide locking (see is_MP() call).
 static bool unsafe_chroot_detected = false;
-static char *unstable_chroot_error = "/proc file system not found.\n"
+static const char *unstable_chroot_error = "/proc file system not found.\n"
               "Java may be unstable running multithreaded in a chroot "
               "environment on Linux when /proc filesystem is not mounted.";
 
@@ -543,13 +543,13 @@ void os::Linux::libpthread_init() {
         // NPTL:
         if (sysconf(_SC_THREAD_THREADS_MAX) > 0) {
            free(str);
-           str = "linuxthreads";
+           str = const_cast<char*>("linuxthreads");
         }
      }
      os::Linux::set_libpthread_version(str);
   } else {
      // glibc before 2.3.2 only has LinuxThreads.
-     os::Linux::set_libpthread_version("linuxthreads");
+     os::Linux::set_libpthread_version(const_cast<char*>("linuxthreads"));
   }
 
   if (strstr(libpthread_version(), "NPTL")) {
@@ -4526,7 +4526,7 @@ extern char** environ;
 // Unlike system(), this function can be called from signal handler. It
 // doesn't block SIGINT et al.
 int os::fork_and_exec(char* cmd) {
-  char * argv[4];
+  const char * argv[4];
   argv[0] = "sh";
   argv[1] = "-c";
   argv[2] = cmd;
